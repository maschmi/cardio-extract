{"version":3,"sources":["FileLoader.tsx","ImportDetails.tsx","ExportData.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FileLoader","props","state","selectedFile","measurements","this","className","buttonText","type","name","onChange","event","changeHandler","length","setState","target","value","file","files","item","arrayBuffer","then","buf","readFromDB","Uint8Array","res","publish","db","a","initSqlJs","locateFile","sqlWasm","SQL","sqlDb","Database","result","exec","data","flatMap","e","values","v","mapToModel","map","x","filter","m","isNaN","measurement_time","myUint8Arr","inner","content","String","fromCodePoint","JSON","parse","React","Component","ImportDetails","input","d","sort","b","firstMeasurementTime","undefined","Date","lastMeasurementTime","setTime","extractDates","count","avgDia","diastolic","reduce","acc","current","avgSys","systolic","calculateAverage","toLocaleString","toFixed","exportData","convertedMeasurements","date","toLocaleDateString","time","toLocaleTimeString","pulse","comment","health","arm","arrhythmia","convertToReadableTimestamps","header","Object","keys","csv","row","column","stringify","_","key","converter","join","unshift","blob","Blob","url","window","URL","createObjectURL","link","document","createElement","href","setAttribute","click","remove","ExportData","disabled","onClick","App","useState","setMeasurements","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"ohBAkBaA,EAAb,kDAII,WAAYC,GAAmB,IAAD,8BAC1B,cAAMA,IAHVC,WAE8B,EAE1B,EAAKA,MAAQ,CAACC,aAAc,GAAIC,aAAc,IAFpB,EAJlC,8CASI,WACI,MAAmC,KAA5BC,KAAKH,MAAMC,aACZE,KAAKH,MAAMC,aACX,qBAZd,oBAeI,WAAU,IAAD,OACL,OACI,sBAAKG,UAAU,qDAAf,UACA,mBAAGA,UAAU,mBAAb,gDACA,wBAAOA,UAAU,6DAAjB,UACI,sBAAMA,UAAU,WAAhB,SAA4BD,KAAKE,eACjC,uBAAOD,UAAU,SACbE,KAAK,OACLC,KAAK,OACLC,SAAW,SAAAC,GAAK,OAAI,EAAKC,cAAcD,SAE3C,sBAAKL,UAAU,cAAf,oBAAqCD,KAAKH,MAAME,aAAaS,OAA7D,wBA1BhB,2BA+BI,SAAcF,GAAmD,IAAD,WAC5DN,KAAKS,SAAL,2BAAkBT,KAAKH,OAAvB,IAA8BC,aAAcQ,EAAMI,OAAOC,SACzD,IAAMC,EAAI,OAAGN,QAAH,IAAGA,GAAH,UAAGA,EAAOI,cAAV,iBAAG,EAAeG,aAAlB,aAAG,EAAsBC,KAAK,GACpC,OAAJF,QAAI,IAAJA,KAAMG,cAAcC,MAAK,SAACC,GAAD,OACrB,EAAKC,WAAW,IAAIC,WAAWF,IAC1BD,MAAK,SAAAI,GAAG,OAAI,EAAKX,SAAL,2BAAkB,EAAKZ,OAAvB,IAA8BE,aAAcqB,QACxDJ,MAAK,kBAAM,EAAKpB,MAAMyB,QAAQ,EAAKxB,MAAME,sBArC1D,+DAyCI,WAAiBuB,GAAjB,4BAAAC,EAAA,sEAEsBC,IAAU,CAAEC,WAAY,kBAAMC,OAFpD,cAEUC,EAFV,OAGUC,EAAQ,IAAID,EAAIE,SAASP,GACnB,gCACNQ,EAASF,EAAMG,KADT,iCAENC,EAAOF,EAAOG,SAAQ,SAACC,GAAD,OACxBA,EAAEC,OAAOF,SAAQ,SAACG,GAAD,OAAmB,EAAKC,WAAWD,EAAEE,KAAI,SAAAC,GAAC,OAAIA,YAPvE,kBASWP,EAAKQ,QAAO,SAACC,GAAD,OAAqBC,MAAK,OAACD,QAAD,IAACA,OAAD,EAACA,EAAGE,sBATrD,2CAzCJ,+EAsDI,SAAWC,GACP,IAAIC,EAAQD,EAAW,GAEjBE,EAAUC,OAAOC,cAAP,MAAAD,OAAM,YAAkBF,IACxC,IACI,OAAOI,KAAKC,MAAMJ,GACpB,SACE,MAAO,QA7DnB,GAAgCK,IAAMC,W,OCa/B,SAASC,EAAczD,GAC1B,IAAMG,EAAe,YAAIH,EAAM0D,OAAOd,QAAO,SAAAe,GAAC,OAAKb,MAAK,OAACa,QAAD,IAACA,OAAD,EAACA,EAAGZ,qBACvDa,MAAK,SAACjC,EAAGkC,GAAJ,OAAUlC,EAAEoB,iBAAmBc,EAAEd,oBAC3C,EA3BJ,SAAsB5C,GAGnB,IAAD,IACQ2D,OAA2CC,IAApB5D,EAAa,GAAmB,IAAI6D,UAASD,EACpEE,OAA8DF,IAAxC5D,EAAaA,EAAaS,OAAO,GAAmB,IAAIoD,UAASD,EAG7F,OAFoB,OAApBD,QAAoB,IAApBA,KAAsBI,QAAtB,UAA8B/D,EAAa,UAA3C,aAA8B,EAAiB4C,kBAC5B,OAAnBkB,QAAmB,IAAnBA,KAAqBC,QAArB,UAA6B/D,EAAaA,EAAaS,OAAO,UAA9D,aAA6B,EAAqCmC,kBAC3D,CAACe,uBAAsBG,uBAmBsBE,CAAahE,GAA1D2D,EAAP,EAAOA,qBAAsBG,EAA7B,EAA6BA,oBAC7B,EAjBJ,SAA0B9D,GAItB,IAAMiE,EAAQjE,EAAaS,OAG3B,MAAO,CACHyD,OAHWlE,EAAauC,KAAI,SAAAG,GAAC,OAAIA,EAAEyB,aAAWC,QAAO,SAACC,EAAKC,GAAN,OAAkBD,EAAMC,KAAU,GAGtEL,EACjBM,OAHWvE,EAAauC,KAAI,SAAAG,GAAC,OAAIA,EAAE8B,YAAUJ,QAAO,SAACC,EAAKC,GAAN,OAAkBD,EAAMC,KAAU,GAGrEL,GAQKQ,CAAiBzE,GAApCkE,EAAP,EAAOA,OAAQK,EAAf,EAAeA,OACf,OACI,sBAAKrE,UAAU,qDAAf,UACI,sBAAKA,UAAU,yBAAf,UACI,4DACuByD,QADvB,IACuBA,OADvB,EACuBA,EAAsBe,oBAE7C,2DACsBZ,QADtB,IACsBA,OADtB,EACsBA,EAAqBY,uBAG/C,sBAAKxE,UAAU,yBAAf,UACI,qDACuBgE,EAAOS,QAAQ,GADtC,WAGA,oDACsBJ,EAAOI,QAAQ,GADrC,iBCrBhB,SAASC,EAAW3C,GAChB,IAAM4C,EAnBV,SAAqC5C,GACjC,OAAOA,EAAKM,KAAI,SAACG,GACb,IAAMoC,EAAO,IAAIjB,KAEjB,OADAiB,EAAKf,QAAQrB,EAAEE,kBACR,CACHkC,KAAMA,EAAKC,qBACXC,KAAMF,EAAKG,qBACXd,UAAWzB,EAAEyB,UACbK,SAAU9B,EAAE8B,SACZU,MAAOxC,EAAEwC,MACTC,QAASzC,EAAEyC,QACXC,OAAQ1C,EAAE0C,OACVC,IAAK3C,EAAE2C,IACPC,WAAY5C,EAAE4C,eAMQC,CAA4BtD,GACpDuD,EAASC,OAAOC,KAAKb,EAAsB,IAK3Cc,EAAMd,EAAsBtC,KAAI,SAACqD,GAAD,OAClCJ,EAAOjD,KAAI,SAAAsD,GAAM,OAAI3C,KAAK4C,UAAUF,EAAIC,IAAS,SAACE,EAAGnF,GAAJ,OALnC,SAACoF,EAAapF,GACzB,OAAiB,OAAVA,EAAiB,GAAKA,EAI+BqF,CAAUJ,EAAQjF,SAASsF,KAAK,QAEnGP,EAAIQ,QAAQX,EAAOU,KAAK,MACxB,IAAME,EAAO,IAAIC,KAAK,CAACV,EAAIO,KAAK,OAAQ,CAAC9F,KAAM,aACzCkG,EAAMC,OAAOC,IAAIC,gBAAgBL,GACjCM,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAOP,EACZI,EAAKI,aAAa,WAAY,oBAC9BJ,EAAKK,QACLL,EAAKM,SAEF,SAASC,EAAWpH,GACvB,OACI,qBAAKK,UAAU,8DAAf,SACI,wBAAQA,UAAU,6DACdgH,SAAgC,IAAtBrH,EAAMoC,KAAKxB,OACrB0G,QAAS,kBAAMvC,EAAW/E,EAAMoC,OAFpC,6BC5BGmF,MAbf,WACE,MAAgCC,mBAA6B,IAA7D,mBAAOpF,EAAP,KAAaqF,EAAb,KAEA,OACE,sBAAKpH,UAAU,gDAAf,UACI,oBAAIA,UAAU,wBAAd,mCACA,cAAC,EAAD,CAAYoB,QAAS,SAACkC,GAAD,OAAsB8D,EAAgB,YAAI9D,OAC/D,cAACF,EAAD,CAAeC,MAAOtB,IACtB,cAACgF,EAAD,CAAYhF,KAAMA,QCJXsF,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBxG,MAAK,YAAkD,IAA/CyG,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCJdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtB,SAASuB,eAAe,SAM1BX,K","file":"static/js/main.95c4be6b.chunk.js","sourcesContent":["import React from \"react\";\nimport './index.css'\nimport initSqlJs, {QueryExecResult, SqlValue} from \"sql.js\";\n// @ts-ignore\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport sqlWasm from \"!!file-loader?name=sql-wasm-[contenthash].wasm!sql.js/dist/sql-wasm.wasm\";\nimport {Measurement} from \"./Models\";\n\nexport interface MainProps {\n    publish: (data: Measurement[]) => void;\n}\n\ninterface MainState {\n    selectedFile: string,\n    measurements: Measurement[]\n}\n\n\nexport class FileLoader extends React.Component<any, any> {\n\n    state: MainState\n\n    constructor(props: MainProps) {\n        super(props);\n        this.state = {selectedFile: \"\", measurements: []};\n    }\n\n    buttonText(): string {\n        return this.state.selectedFile !== ''\n            ? this.state.selectedFile\n            : 'No file selected';\n    }\n\n    render() {\n        return (\n            <div className=\"flex flex-col rounded shadow p-2 bg-gray-50 border\">\n            <p className=\"text-center mt-2\">Please select the database to load</p>\n            <label className=\"rounded p-2 my-2 text-center hover:bg-blue-500 bg-blue-200\">\n                <span className=\"bg-green\">{this.buttonText()}</span>\n                <input className=\"hidden\"\n                    type=\"file\"\n                    name=\"file\"\n                    onChange= {event => this.changeHandler(event)}/>\n            </label>\n                <div className=\"text-center\">Loaded {this.state.measurements.length} measurements</div>\n            </div>\n        )\n    }\n\n    changeHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        this.setState({...this.state, selectedFile: event.target.value});\n        const file = event?.target?.files?.item(0);\n        file?.arrayBuffer().then((buf) =>\n            this.readFromDB(new Uint8Array(buf))\n                .then(res => this.setState({...this.state, measurements: res}))\n                .then(() => this.props.publish(this.state.measurements))\n        );\n    }\n\n    async readFromDB(db: ArrayLike<any>): Promise<Measurement[]> {\n\n        const SQL = await initSqlJs({ locateFile: () => sqlWasm });\n        const sqlDb = new SQL.Database(db);\n        const sql = \"SELECT value FROM serverCache\";\n        const result = sqlDb.exec(sql);\n        const data = result.flatMap((e : QueryExecResult)=>\n            e.values.flatMap((v: SqlValue[]) => this.mapToModel(v.map(x => x as number))))\n\n        return data.filter((m: Measurement) => !isNaN(m?.measurement_time));\n    }\n\n\n    mapToModel(myUint8Arr: number[]): Measurement {\n        let inner = myUint8Arr[0];\n        // @ts-ignore\n        const content = String.fromCodePoint(...inner);\n        try {\n            return JSON.parse(content) as Measurement\n        } catch {\n            return {} as Measurement\n        }\n    }\n\n}\n","import React from \"react\";\nimport {Measurement} from \"./Models\";\nimport \"./tailwind.css\"\nexport interface DetailsProps {\n    input: Measurement[]\n}\n\nfunction extractDates(measurements: Measurement[]): {\n    firstMeasurementTime: Date | undefined,\n    lastMeasurementTime: Date | undefined\n} {\n    const firstMeasurementTime = measurements[0] !== undefined ? new Date() : undefined;\n    const lastMeasurementTime = measurements[measurements.length-1] !== undefined ? new Date() : undefined;\n    firstMeasurementTime?.setTime(measurements[0]?.measurement_time);\n    lastMeasurementTime?.setTime(measurements[measurements.length-1]?.measurement_time);\n    return {firstMeasurementTime, lastMeasurementTime};\n}\n\nfunction calculateAverage(measurements: Measurement[]):{\n    avgDia: number,\n    avgSys: number\n} {\n    const count = measurements.length;\n    const diaTot = measurements.map(m => m.diastolic).reduce((acc, current) => acc + current, -1);\n    const sysTot = measurements.map(m => m.systolic).reduce((acc, current) => acc + current, -1);\n    return {\n        avgDia: diaTot / count,\n        avgSys: sysTot / count\n    }\n}\n\nexport function ImportDetails(props: DetailsProps) {\n    const measurements = [...props.input].filter(d => !isNaN(d?.measurement_time))\n        .sort((a, b) => a.measurement_time - b.measurement_time);\n    const {firstMeasurementTime, lastMeasurementTime} = extractDates(measurements);\n    const {avgDia, avgSys } = calculateAverage(measurements);\n    return (\n        <div className=\"rounded shadow p-2 border bg-gray-50 flex flex-col\">\n            <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                    First measurement {firstMeasurementTime?.toLocaleString()}\n                </div>\n                <div>\n                    Last measurement {lastMeasurementTime?.toLocaleString()}\n                </div>\n            </div>\n            <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                    Average Diastolic {avgDia.toFixed(2)} mmHg\n                </div>\n                <div>\n                    Average Systolic {avgSys.toFixed(2)} mmHg\n                </div>\n            </div>\n        </div>\n    )\n}","import {Measurement} from \"./Models\";\nimport \"./tailwind.css\"\nexport interface ExportProps {\n    data: Measurement[]\n}\ntype MeasurementWithoutTime = Omit<Measurement, 'measurement_time'>;\ninterface DateTimedMeasurement extends MeasurementWithoutTime {\n    date: string\n    time: string,\n}\n\nfunction convertToReadableTimestamps(data: Measurement[]): DateTimedMeasurement[] {\n    return data.map((m: Measurement) => {\n        const date = new Date();\n        date.setTime(m.measurement_time);\n        return {\n            date: date.toLocaleDateString(),\n            time: date.toLocaleTimeString(),\n            diastolic: m.diastolic,\n            systolic: m.systolic,\n            pulse: m.pulse,\n            comment: m.comment,\n            health: m.health,\n            arm: m.arm,\n            arrhythmia: m.arrhythmia\n        } as DateTimedMeasurement\n    });\n}\n\nfunction exportData(data: Measurement[]) {\n    const convertedMeasurements = convertToReadableTimestamps(data);\n    const header = Object.keys(convertedMeasurements[0]) as (keyof DateTimedMeasurement)[];\n    const converter = (key: string, value: any) =>{\n           return value === null ? '' : value;\n    }\n\n    const csv = convertedMeasurements.map((row: DateTimedMeasurement) =>\n        header.map(column => JSON.stringify(row[column], (_, value) => converter(column, value))).join(',')\n    )\n    csv.unshift(header.join(','));\n    const blob = new Blob([csv.join('\\n')], {type: 'text/csv'})\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.setAttribute('download', 'measurements.csv');\n    link.click();\n    link.remove();\n}\nexport function ExportData(props: ExportProps) {\n    return (\n        <div className=\"rounded shadow border bg-gray-50 inline-flex justify-center\">\n            <button className=\"rounded p-2 my-2 text-center hover:bg-blue-500 bg-blue-200\"\n                disabled={props.data.length === 0}\n                onClick={() => exportData(props.data)}\n            >Export as CSV</button>\n        </div>\n\n    )\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {FileLoader} from \"./FileLoader\";\nimport {ImportDetails} from \"./ImportDetails\";\nimport {Measurement} from \"./Models\";\nimport {ExportData} from \"./ExportData\";\nimport './index.css'\n\n\n\nfunction App() {\n  const [data, setMeasurements] = useState<Array<Measurement>>([])\n\n  return (\n    <div className=\"flex space-y-3 mr-auto ml-auto flex-col w-4/5\">\n        <h1 className=\"text-center font-bold\">Measurement extractor</h1>\n        <FileLoader publish={(d: Measurement[]) => setMeasurements([...d])}/>\n        <ImportDetails input={data}/>\n        <ExportData data={data}/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}